from aiogram import Bot, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_db_connection
from utils import get_main_keyboard
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from config import SMTP_SERVER, SMTP_PORT, SMTP_EMAIL, SMTP_PASSWORD, ADMIN_EMAIL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)

async def handle_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /feedback: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞."""
    user_id = message.from_user.id
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FeedbackStates.waiting_for_feedback)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –æ—Ç–∑—ã–≤–∞")

async def process_feedback(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–æ—á—Ç—É."""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    feedback_text = message.text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('INSERT INTO feedback (user_id, username, feedback_text) VALUES (?, ?, ?)',
              (user_id, username, feedback_text))
    conn.commit()
    conn.close()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç {username} ({user_id}): {feedback_text}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø–æ—á—Ç—É
    try:
        msg = MIMEMultipart()
        msg['From'] = SMTP_EMAIL
        msg['To'] = ADMIN_EMAIL
        msg['Subject'] = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {username} ({user_id})"
        body = f"–û—Ç–∑—ã–≤ –æ—Ç {username} (ID: {user_id}):\n\n{feedback_text}"
        msg.attach(MIMEText(body, 'plain'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # –í–∫–ª—é—á–µ–Ω–∏–µ TLS
            server.login(SMTP_EMAIL, SMTP_PASSWORD)
            server.sendmail(SMTP_EMAIL, ADMIN_EMAIL, msg.as_string())
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É {ADMIN_EMAIL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø–æ—á—Ç—É {ADMIN_EMAIL}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()