from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_db_connection
from utils import get_main_keyboard
import logging
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def handle_fight(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /fight: –Ω–∞—á–∏–Ω–∞–µ—Ç –±–æ–π —Å –≤—Ä–∞–≥–æ–º."""
    user_id = message.from_user.id
    conn = get_db_connection()
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
    c.execute('SELECT health, damage, defense FROM players WHERE user_id = ?', (user_id,))
    player = c.fetchone()
    if not player:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_keyboard())
        conn.close()
        return
    player_health, player_base_damage, player_base_defense = player
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    c.execute('SELECT effect_type, effect_value, rounds_left FROM active_effects WHERE user_id = ?', (user_id,))
    effects = c.fetchall()
    player_damage = player_base_damage
    player_defense = player_base_defense
    for effect in effects:
        if effect['effect_type'] == 'damage_buff':
            player_damage += effect['effect_value']
        elif effect['effect_type'] == 'defense_buff':
            player_defense += effect['effect_value']
    
    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
    c.execute('SELECT enemy_id, name, health, damage, defense FROM enemies')
    enemies = c.fetchall()
    if not enemies:
        await message.answer("–í—Ä–∞–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        conn.close()
        return
    enemy = random.choice(enemies)
    enemy_id, enemy_name, enemy_health, enemy_damage, enemy_defense = enemy
    
    # –†–∞—Å—á—ë—Ç —É—Ä–æ–Ω–∞
    damage_to_enemy = max(1, player_damage - enemy_defense)
    damage_to_player = max(1, enemy_damage - player_defense)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±–æ—è
    effects_text = "\n".join([f"üîÆ {effect['effect_type'].replace('_buff', '')}: +{effect['effect_value']} ({effect['rounds_left']} —Ä–∞—É–Ω–¥–æ–≤)" for effect in effects]) if effects else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"
    fight_text = (
        f"‚öîÔ∏è *–ë–æ–π —Å {enemy_name}!*\n\n"
        f"üë§ *–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player_health}\n"
        f"‚öîÔ∏è –£—Ä–æ–Ω: {player_damage}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {player_defense}\n"
        f"üîÆ –≠—Ñ—Ñ–µ–∫—Ç—ã:\n{effects_text}\n\n"
        f"üëπ *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {enemy_name}:*\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {enemy_health}\n"
        f"‚öîÔ∏è –£—Ä–æ–Ω: {enemy_damage}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {enemy_defense}\n\n"
        f"–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∑–µ–ª–∏–π)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_attack_{enemy_id}_{enemy_health}_{damage_to_enemy}_{damage_to_player}")],
        [InlineKeyboardButton(text="–°–±–µ–∂–∞—Ç—å", callback_data="fight_flee")]
    ])
    
    await message.answer(fight_text, parse_mode='Markdown', reply_markup=keyboard)
    logger.info(f"–ù–∞—á–∞–ª–æ –±–æ—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ—Ç–∏–≤ {enemy_name}")
    conn.close()

async def handle_fight_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é (–∞—Ç–∞–∫–∞, –ø–æ–±–µ–≥)."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback.data}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ callback_data
    try:
        parts = callback.data.split('_')
        action = parts[1]
        logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}, –ø–æ–ª–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")
    except IndexError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {callback.data}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
        await callback.answer()
        return
    
    conn = get_db_connection()
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
    c.execute('SELECT health, damage, defense FROM players WHERE user_id = ?', (user_id,))
    player = c.fetchone()
    if not player:
        await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=None)
        conn.close()
        await callback.answer()
        return
    player_health, player_base_damage, player_base_defense = player
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    c.execute('SELECT effect_type, effect_value, rounds_left FROM active_effects WHERE user_id = ?', (user_id,))
    effects = c.fetchall()
    player_damage = player_base_damage
    player_defense = player_base_defense
    for effect in effects:
        if effect['effect_type'] == 'damage_buff':
            player_damage += effect['effect_value']
        elif effect['effect_type'] == 'defense_buff':
            player_defense += effect['effect_value']
    
    if action == 'flee':
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: flee")
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–æ–≤)
        for effect in effects:
            rounds_left = effect['rounds_left'] - 1
            if rounds_left <= 0:
                c.execute('DELETE FROM active_effects WHERE user_id = ? AND effect_type = ?', (user_id, effect['effect_type']))
            else:
                c.execute('UPDATE active_effects SET rounds_left = ? WHERE user_id = ? AND effect_type = ?',
                          (rounds_left, user_id, effect['effect_type']))
        conn.commit()
        await callback.message.edit_text("–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Å–±–µ–∂–∞—Ç—å... –£—Å–ø–µ—Ö!", reply_markup=None)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±–µ–∂–∞–ª –∏–∑ –±–æ—è")
        conn.close()
        await callback.answer()
        return
    
    if action == 'attack':
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: attack")
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try:
            enemy_id = int(parts[2])
            enemy_health = int(parts[3])
            damage_to_enemy = int(parts[4])
            damage_to_player = int(parts[5])
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback.data –¥–ª—è attack: {callback.data}, –æ—à–∏–±–∫–∞: {e}")
            await callback.message.edit_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
            conn.close()
            await callback.answer()
            return
    
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—Ä–∞–≥–∞
        c.execute('SELECT name, damage, defense FROM enemies WHERE enemy_id = ?', (enemy_id,))
        enemy = c.fetchone()
        if not enemy:
            await callback.message.edit_text("–í—Ä–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None)
            conn.close()
            await callback.answer()
            return
        enemy_name, enemy_damage, enemy_defense = enemy
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        enemy_health -= damage_to_enemy
        player_health -= damage_to_player
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–æ–≤)
        for effect in effects:
            rounds_left = effect['rounds_left'] - 1
            if rounds_left <= 0:
                c.execute('DELETE FROM active_effects WHERE user_id = ? AND effect_type = ?', (user_id, effect['effect_type']))
            else:
                c.execute('UPDATE active_effects SET rounds_left = ? WHERE user_id = ? AND effect_type = ?',
                          (rounds_left, user_id, effect['effect_type']))
        
        if enemy_health <= 0:
            # –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞
            c.execute('UPDATE players SET gold = gold + 20 WHERE user_id = ?', (user_id,))
            c.execute('UPDATE players SET health = ? WHERE user_id = ?', (player_health, user_id))
            conn.commit()
            await callback.message.edit_text(f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy_name}! +20 –∑–æ–ª–æ—Ç–∞", parse_mode='Markdown', reply_markup=None)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–±–µ–¥–∏–ª {enemy_name}")
            conn.close()
            await callback.answer()
            return
        
        if player_health <= 0:
            # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            c.execute('DELETE FROM active_effects WHERE user_id = ?', (user_id,))
            c.execute('UPDATE players SET health = 50 WHERE user_id = ?', (user_id,))
            conn.commit()
            await callback.message.edit_text("üíÄ –í—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã! –ó–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ 50.", reply_markup=None)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–∏–≥—Ä–∞–ª –±–æ–π")
            conn.close()
            await callback.answer()
            return
        
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–æ—è
        c.execute('UPDATE players SET health = ? WHERE user_id = ?', (player_health, user_id))
        conn.commit()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
        c.execute('SELECT effect_type, effect_value, rounds_left FROM active_effects WHERE user_id = ?', (user_id,))
        effects = c.fetchall()
        player_damage = player_base_damage
        player_defense = player_base_defense
        for effect in effects:
            if effect['effect_type'] == 'damage_buff':
                player_damage += effect['effect_value']
            elif effect['effect_type'] == 'defense_buff':
                player_defense += effect['effect_value']
        
        damage_to_enemy = max(1, player_damage - enemy_defense)
        damage_to_player = max(1, enemy_damage - player_defense)
        
        effects_text = "\n".join([f"üîÆ {effect['effect_type'].replace('_buff', '')}: +{effect['effect_value']} ({effect['rounds_left']} —Ä–∞—É–Ω–¥–æ–≤)" for effect in effects]) if effects else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"
        fight_text = (
            f"‚öîÔ∏è *–ë–æ–π —Å {enemy_name}!*\n\n"
            f"üë§ *–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player_health}\n"
            f"‚öîÔ∏è –£—Ä–æ–Ω: {player_damage}\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {player_defense}\n"
            f"üîÆ –≠—Ñ—Ñ–µ–∫—Ç—ã:\n{effects_text}\n\n"
            f"üëπ *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {enemy_name}:*\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {enemy_health}\n"
            f"‚öîÔ∏è –£—Ä–æ–Ω: {enemy_damage}\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {enemy_defense}\n\n"
            f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage_to_enemy} —É—Ä–æ–Ω–∞!\n"
            f"{enemy_name} –Ω–∞–Ω—ë—Å –≤–∞–º {damage_to_player} —É—Ä–æ–Ω–∞!\n"
            f"–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_attack_{enemy_id}_{enemy_health}_{damage_to_enemy}_{damage_to_player}")],
            [InlineKeyboardButton(text="–°–±–µ–∂–∞—Ç—å", callback_data="fight_flee")]
        ])
        
        await callback.message.edit_text(fight_text, parse_mode='Markdown', reply_markup=keyboard)
        conn.close()
        await callback.answer()